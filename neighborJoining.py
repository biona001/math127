"""neighbor joining algorithm"""
import numpy
import math
from mutate import mutate
from scipy.io import loadmat

###### OVERALL PROJECT LOGIC: #######
# Given a string of doctor's DNA sequence, and a lot of patient's DNA sequence,
# we can compute percentage of sites these sequences differ, denoted by p. Then we can 
# calculate estimated distance between doctor and patients based on d = -3/4 ln(1-4/3*p).
# Then the input matrix for neighbor joining is going to be these distances, where
# a = doctor, b = patient_1, .... 
#####################################

#####################################
# NOTE: This code also supports an input of amino acide sequences, in which case the 
# distance matrix would be computed according to the Kimura distance defined as 
# d = -ln(1 - p - 0.2*p^2)
#####################################

###### HOW TO DO NEIGHBOR JOINING? #######
# This code basically follows the algorithm given by wiki here:
# 	https://en.wikipedia.org/wiki/Neighbor_joining#The_algorithm
# After running throught the alrithm, we output a list called matrixList. 
# This list contains a bunch of 3x3 matrices, each followed by a list of their node names.
# For example, it may look like: (except the last one is a 4x4 matrix)
# [   [3x3 matrix, [split_1,b,c]]  ,  [3x3 matrix2, [split_2, a, d]]   ...   [...]     ] 
# From this, we generate a .gv file for graphviz, which outputs the tree.
############################################

def MakeDistanceMatrixFromData(data_List, string):
	""" given a lot of data sequences, construct a distance matrix out of them"""

	# Need all sequences to be the same length. If not, find the shortest one
	# and truncate others by cutting extra nucleotides off from the end. 
	def minLength(data_List): 
		min_length = len(data_List[0])
		for data in data_List:
			if len(data) <= min_length:
				min_length = len(data)
		return min_length

	def truncate(data_List, min_length): 
		new_list = []
		for data in data_List:
			new_list.append(data[:min_length])
		return new_list

	def DNAcalcDifference(seq1, seq2): # Jukes Cantor distance
		difference = 0
		assert len(seq1) == len(seq2), 'sequences have to be the same length'
		for i in range(0, len(seq1)):
			if seq1[i] != seq2[i]:
				difference += 1
		perc_diff = float(difference) / float(len(seq1))
		inside_log = 1 - 4/3 * perc_diff
		return -0.75 * math.log(inside_log) 

	def AminoAcidCalcDifference(seq1, seq2): # Kimura's distance for amino acids
		difference = 0
		assert len(seq1) == len(seq2), 'sequences have to be the same length'
		for i in range(0, len(seq1)):
			if seq1[i] != seq2[i]:
				difference += 1
		perc_diff = float(difference) / float(len(seq1)) # difference cannot be more than 0.8541
		assert perc_diff < 0.85, "percent different too high."
		inside_log = 1 - perc_diff - 0.2 * (perc_diff ** 2)
		return -1.0 * math.log(inside_log)

	min_length = minLength(data_List) 
	data_List = truncate(data_List, min_length)
	matrix_size = len(data_List)
	distMatrix = numpy.zeros((matrix_size, matrix_size))

	for i in range(0, matrix_size):
		for j in range(0, matrix_size):
			if i == j:
				distMatrix[i][j] = 0
			elif string == "DNA":
				distMatrix[i][j] = DNAcalcDifference(data_List[i], data_List[j])
			elif string == "AA":
				distMatrix[i][j] = AminoAcidCalcDifference(data_List[i], data_List[j])
			else:
				raise Exception('second input should be "DNA" or "AA"')
	print distMatrix
	return distMatrix

def calcRowSum(matrix, row):
	"""calculates the sum of a particular row, but works for columns too since these 
	matrices are symmetric."""

	sizeOfRow = matrix.shape[0]
	rowSum = 0
	colCounter = 0
	while colCounter < sizeOfRow:
		rowSum += matrix[row][colCounter]
		colCounter += 1
	return rowSum

def findMin(matrix):
	"""Returns the coordinate of the lowest entry in a matrix as a pair a number.
	Only searches the top triangular matrix."""
	currentMin = matrix[0][0]
	xCor, yCor = 0, 0
	for x in range(0, matrix.shape[0]):
		for y in range(x + 1, matrix.shape[1]):
			if matrix[x][y] < currentMin:
				currentMin = matrix[x][y]
				xCor, yCor = x, y
	return (xCor, yCor)	

def QMatrix(distMatrix):
	"""Inputs a distance matrix d(i,j) and outputs a QMatrix Q(i,j).
	Use the following formula found on wiki:
	Q(i,j) = (n-2)*d(i,j) - (sum of row i) - (sum of column j)
	example: Q(a, b) = 3*5 - (5+9+9+8) - (5+10+10+9) = -50"""

	assert distMatrix.shape[0] == distMatrix.shape[1], 'matrix not square'
	assert distMatrix.shape[0] > 3, 'matrix size 3 or smaller'

	# first make a nxn zero matrix, and fill it with the correct numbers.
	sizeOfMatrix = distMatrix.shape[0]
	QMatrix = numpy.zeros((sizeOfMatrix, sizeOfMatrix))

	for x in range(0, sizeOfMatrix):
		rowSum = calcRowSum(distMatrix, x)
		for y in range(0, sizeOfMatrix):
			if x == y:
				continue # don't wanna calculate values along the diagonal
			colSum = calcRowSum(distMatrix, y)
			QMatrix[x][y] = (sizeOfMatrix - 2) * distMatrix[x][y] - colSum - rowSum

	return QMatrix


def saveMatrix(dist1, dist2, AtoBDist):
	"""makes a 3x3 distance matrix. The purpose of this matrix is to keep track of the distance 
	of the joined nodes. This mini distance matrix will be stored in matrixList, followed by a 
	single row containing the name of the rows."""
	mat = numpy.zeros((3, 3))
	mat[0][1], mat[1][0] = dist1, dist1
	mat[0][2], mat[2][0] = dist2, dist2
	mat[1][2], mat[2][1] = AtoBDist, AtoBDist
	return mat


"""a list of matrices that stores the values of the 2 "new distance" to the new node
created when makeNewMatrix is ran. """
matrixList = []
numSplits = 1


def makeNewMatrix(distMatrix, QMatrix, taxaList):
	"""takes in the original distance matrix, a QMatrix, and a list of taxas, 
	outputs a distance matrix whose dimension is 1 smaller than the QMatrix, and 
	a taxa list where the 2 joined nodes are removed. The newly created node will be on the 
	first row and column of the new matrix. """

	assert distMatrix.shape[0] == QMatrix.shape[0], 'Impossible: distance matrix and QMatrix have different size.'
	assert distMatrix.shape[1] == QMatrix.shape[1], 'Impossible: distance matrix and QMatrix have different size.'

	matrixSize = QMatrix.shape[0]
	minRowCoord, minColCoord = findMin(QMatrix)[0], findMin(QMatrix)[1]
	AtoBDist = distMatrix[minRowCoord][minColCoord] # distance between the closest 2 nodes
	randomConst = 1. / (2 * (matrixSize - 2)) 

	#calculates the distance from Node A to the newly constructed Node.
	AtoNewNodeDist = 0.5 * AtoBDist + randomConst * (calcRowSum(distMatrix, minRowCoord) - calcRowSum(distMatrix, minColCoord)) 
	BtoNewNodeDist = AtoBDist - AtoNewNodeDist


	# After connecting A and B to a new node split_0, put their distances into a 3x3 matrix. To 
	# keep track of their node names, put their names into an array. Then put [3x3matrix, node_name]
	# as a list into the matrixList. I know it's complicated but this is the best idea I have. 
	A3x3Matrix = saveMatrix(AtoNewNodeDist, BtoNewNodeDist, AtoBDist)
	global numSplits #need to declare global to modify a global variable
	newNode = "split_" + str(numSplits)
	numSplits += 1 
	smallMatrixNodeList = [newNode, taxaList[minRowCoord], taxaList[minColCoord]]
	matrixList.append([A3x3Matrix, smallMatrixNodeList])
	
	#deleting 2 taxa and adding the new taxa
	for index in sorted([minRowCoord, minColCoord], reverse=True): 
		del taxaList[index]
	taxaList.insert(0, newNode)

	#makes a new matrix whose size is 1 smaller than the QMatrix
	newMatrix = numpy.zeros((matrixSize - 1, matrixSize - 1))

	# first search through the original matrix, and copies unaffected distances
	# to the lower right hand corner of the new matrix. The 2 integers keep tracks
	# of how many rows/columns have been "found" that needs to be copied, so the 
	# numbers can be transfered to the new matrix.
	rowCounter = 0
	for x in range(0, matrixSize):
		if (x == minRowCoord) or (x == minColCoord):
			continue # the new matrix should not include the original 2 nodes.
		rowCounter += 1
		colCounter = 0
		for y in range(0, matrixSize):
			if (y == minRowCoord) or (y == minColCoord):
				continue
			colCounter += 1
			newMatrix[rowCounter][colCounter] = distMatrix[x][y]

	# calculates the first row and colume of the new distance matrix. ie the distances
	# from the new node to all other unaffected node. 
	newMatrixCounter = 1
	for i in range(0, distMatrix.shape[0]):
		if i == minRowCoord or i == minColCoord:
			continue
		newMatrix[0][newMatrixCounter] = 0.5 * (distMatrix[minRowCoord][i] + distMatrix[minColCoord][i] - AtoBDist)
		newMatrix[newMatrixCounter][0] = 0.5 * (distMatrix[minRowCoord][i] + distMatrix[minColCoord][i] - AtoBDist)
		newMatrixCounter += 1

	return newMatrix

def calcLastMatrix(distMatrix, taxaList):
	""" This is the 3-point-formula. Only exucuted when exactly 3 nodes
	are left to be joined. """
	AtoB = distMatrix[0][1]
	AtoC = distMatrix[0][2]
	BtoC = distMatrix[1][2]

	xDist = 0.5 * (AtoB + AtoC - BtoC)
	yDist = 0.5 * (AtoB + BtoC - AtoC)
	zDist = 0.5 * (AtoC + BtoC - AtoB)
	distList = [xDist, yDist, zDist]

	global numSplits 
	newNode = "split_" + str(numSplits)
	allNodes = [newNode, taxaList[0], taxaList[1], taxaList[2]]
	
	matrixList.append([distList, allNodes])
	return

def writeGV(matrixList):
	with open('testinginging.gv', 'a') as the_file:
		the_file.write('graph G {\n')
		the_file.write('	label="test hue";')
		the_file.write('	labelloc=top;')
		the_file.write('	labeljust=left;')

		for pair in matrixList: 
			if len(pair[1]) == 4: # if at the last pair
				the_file.write('	' + str(pair[1][0]) + ' -- ' + str(pair[1][1]) + '[ label = ' + str(round(pair[0][0], 6)) + '];\n')
				the_file.write('	' + str(pair[1][0]) + ' -- ' + str(pair[1][2]) + '[ label = ' + str(round(pair[0][1], 6)) + '];\n')
				the_file.write('	' + str(pair[1][0]) + ' -- ' + str(pair[1][3]) + '[ label = ' + str(round(pair[0][2], 6)) + '];\n')

			else:
				the_file.write('	' + str(pair[1][0]) + ' -- ' + str(pair[1][1]) + '[ label = ' + str(round(pair[0][0][1], 6)) + '];\n')
				the_file.write('	' + str(pair[1][0]) + ' -- ' + str(pair[1][2]) + '[ label = ' + str(round(pair[0][0][2], 6)) + '];\n')

		the_file.write('}')


"""calling neighbor joining on testMatrix. Writes a .gv file."""
def main():

	# doctor and patient's DNA sample
	# hiv_data = loadmat('flhivdata.mat')
	# doctor_sequence = hiv_data["dnt"]
	# patient_b = hiv_data["ptb"]
	# patient_c = hiv_data["ptc"]
	# patient_d = hiv_data["ptd"]
	# non_patient_1 = hiv_data["lc1"]
	# non_patient_2 = hiv_data["lc5"]
	# doctor_sequence_DNA = doctor_sequence[0]
	# patient_b_DNA = patient_b[0]
	# patient_c_DNA = patient_c[0]
	# patient_d_DNA = patient_d[0]
	# non_patient_1_DNA = non_patient_1[0]
	# non_patient_2_DNA = non_patient_2[0]
	# DNA_List = [doctor_sequence_DNA, patient_b_DNA, patient_c_DNA, patient_d_DNA, non_patient_1_DNA, non_patient_2_DNA]
	# mat = MakeDistanceMatrixFromData(DNA_List, "DNA")
	# taxaList = ['DOCTOR', 'HIV_Patient_b', 'HIV_Patient_c', 'HIV_Patient_d', 'control_1', 'control_2']

	# simulating evolution by mutate
	# hiv_data = loadmat('flhivdata.mat')
	# doctor_sequence = hiv_data["dnt"]
	# doctors_DNA = doctor_sequence[0]
	# mutate_list = []
	# taxaList = []
	# doctors_tree = mutate(0.03, 50, doctors_DNA, 2)
	# for x in doctors_tree.get_vertices():
	# mutate_list.append(x.get_sequence())
	# taxaList.append("child_" + str(len(mutate_list)))
	# mat = MakeDistanceMatrixFromData(mutate_list, "DNA")

	# hemoglobin amino acid
	# human = "MVHLTPEEKSAVTALWGKVNVDEVGGEALGRLLVVYPWTQRFFESFGDLSTPDAVMGNPKVKAHGKKVLGAFSDGLAHLDNLKGTFATLSELHCDKLHVDPENFRLLGNVLVCVLAHHFGKEFTPPVQAAYQKVVAGVANALAHKYH"
	# sperm_whale = "MVHLTGEEKSGLTALWAKVNVEEIGGEALGRLLVVYPWTQRFFEHFGDLSTADAVMKNPKVKKHGQKVLASFGEGLKHLDNLKGTFATLSELHCDKLHVDPENFRLLGNVLVVVLARHFGKEFTPELQTAYQKVVAGVANALAHKYH"
	# rabbit = "MVHLSSEEKSAVTALWGKVNVEEVGGEALGRLLVVYPWTQRFFESFGDLSSAHAVMSNPKVKAHGKKVLAAFSEGLNHLDNLKGTFAKLSELHCDKLHVDPENFRLLGNVLVVVLSHHFGKEFTPQVQAAYQKVVAGVANALAHKYH"
	# african_clawed_frog = "MVHLSADEKSAINAVWSKVNIENDGHDALTRLLVVFPWTQRYFSSFGNLSNVAAISGNAKVRAHGKKVLSAVDESIHHLDDIKNFLSVLSTKHAEELHVDPENFKRLADVLVIVLAGKLGAAFTPQVQAAWEKFSAGLVAALSHGYF"
	# rufous_colored_swallow = "MVQWTAEEKQLITGLWGKVNVAECGGEALARLLIVYPWTQRFFASFGNLSGATAIIGNPKVQAHGKKVLTSFGEAVKNLDGIKXTFSALSELHCDKLHVDPENFRLLGDILVIVLAAHFGKDFTPECQAAWQKLVRVVAHALARKYH"
	# Amino_Acid_List = [human, sperm_whale, rabbit, african_clawed_frog, rufous_colored_swallow]
	# mat = MakeDistanceMatrixFromData(Amino_Acid_List, "AA")
	# taxaList = ['human', 'sperm_whale', 'rabbit', 'african_clawed_frog', 'rufous_colored_swallow']	

	# hemoglobin DNA
	# human = "ATGGTCCATCTGACCCCCGAAGAAAAGAGTGCTGTAACCGCATTGTGGGGCAAAGTTAATGTAGACGAAGTAGGCGGCGAGGCTCTGGGCCGTCTTCTAGTAGTCTATCCGTGGACACAACGATTCTTTGAGTCCTTTGGAGACCTAAGCACTCCAGATGCCGTTATGGGGAATCCGAAGGTAAAAGCTCATGGAAAGAAGGTCTTGGGTGCGTTCAGCGACGGCTTGGCCCATCTGGATAATTTAAAGGGCACCTTCGCCACTCTGTCAGAGCTTCATTGCGACAAGCTCCATGTCGACCCCGAAAATTTTCGTCTACTCGGCAACGTACTCGTGTGCGTCCTTGCGCATCACTTTGGTAAAGAGTTCACACCGCCCGTACAAGCAGCGTATCAAAAGGTAGTCGCTGGCGTGGCCAATGCATTAGCCCATAAATACCAT"
	# sperm_whale = "ATGGTTCACTTGACCGGTGAGGAAAAGAGTGGGTTGACGGCACTTTGGGCGAAAGTTAACGTAGAGGAAATTGGAGGCGAGGCTCTGGGTCGGTTATTGGTCGTCTACCCCTGGACACAAAGGTTCTTTGAGCATTTCGGCGATTTGTCAACGGCTGATGCTGTTATGAAGAATCCGAAAGTTAAGAAACATGGGCAGAAAGTCCTGGCATCATTCGGCGAGGGCCTAAAGCACTTAGATAATTTAAAAGGTACTTTTGCGACATTGAGCGAACTTCACTGCGACAAGCTTCACGTGGATCCAGAAAACTTCCGCCTTCTCGGTAATGTATTAGTCGTGGTTCTCGCGCGACACTTCGGAAAGGAGTTTACTCCCGAACTCCAGACGGCCTATCAGAAGGTTGTAGCTGGAGTTGCTAACGCGTTAGCTCACAAATACCAC"
	# rabbit = "ATGGTACATCTTTCATCGGAAGAAAAATCCGCCGTTACCGCCCTATGGGGAAAAGTCAACGTCGAAGAGGTTGGTGGGGAAGCCTTGGGAAGATTATTAGTTGTATACCCGTGGACGCAACGCTTTTTTGAGAGTTTTGGAGATTTGAGCTCAGCGCATGCGGTGATGAGCAATCCAAAAGTAAAAGCTCACGGCAAGAAAGTCCTAGCCGCCTTCAGTGAGGGACTTAACCATCTGGATAATTTGAAAGGTACTTTCGCCAAGCTGAGCGAACTCCATTGTGATAAGCTGCACGTGGACCCGGAAAACTTTCGCTTGCTGGGTAATGTGCTTGTCGTTGTCCTCTCCCATCATTTTGGCAAGGAATTCACTCCCCAAGTACAAGCAGCATATCAAAAAGTAGTGGCCGGGGTGGCCAATGCACTGGCGCACAAATATCAT"
	# african_clawed_frog = "ATGGTCCATTTAAGCGCCGACGAAAAGTCCGCGATCAACGCTGTTTGGTCGAAAGTGAACATTGAGAACGACGGACATGACGCACTTACCAGACTGCTAGTTGTGTTCCCCTGGACTCAACGTTACTTCAGCTCTTTCGGGAACTTATCGAATGTTGCCGCCATTAGCGGCAACGCAAAGGTTCGAGCACACGGAAAGAAGGTTCTTTCGGCCGTCGATGAATCAATCCACCATTTGGATGACATCAAAAATTTCTTGTCTGTCTTAAGTACTAAACATGCAGAAGAGTTGCACGTGGACCCCGAAAATTTCAAACGGTTGGCCGACGTACTTGTCATTGTCCTTGCTGGAAAACTTGGGGCTGCATTTACTCCCCAAGTGCAGGCTGCATGGGAAAAGTTTTCTGCTGGGCTTGTCGCAGCGCTATCTCATGGCTACTTT"
	# rufous_colored_swallow = "ATGGTACAATGGACGGCAGAAGAAAAGCAATTGATAACAGGATTGTGGGGCAAAGTGAATGTGGCCGAGTGCGGTGGTGAGGCACTCGCACGCCTGTTGATCGTATACCCCTGGACTCAAAGGTTTTTTGCAAGCTTTGGTAATCTAAGCGGGGCAACCGCCATCATCGGAAATCCTAAAGTGCAAGCCCATGGGAAAAAAGTTCTGACCTCCTTCGGAGAAGCCGTAAAGAACTTAGATGGCATAAAAATAACCTTTTCTGCTCTATCCGAACTACACTGCGACAAGCTCCATGTAGATCCCGAAAATTTTCGACTACTAGGTGATATACTCGTAATCGTACTTGCGGCTCACTTCGGGAAGGATTTCACACCGGAGTGTCAAGCAGCGTGGCAGAAGTTAGTGCGCGTGGTAGCCCATGCCTTAGCAAGGAAGTATCAC"
	# DNA_List = [human, sperm_whale, rabbit, african_clawed_frog, rufous_colored_swallow]
	# mat = MakeDistanceMatrixFromData(DNA_List, "DNA")
	# taxaList = ['human', 'sperm_whale', 'rabbit', 'african_clawed_frog', 'rufous_colored_swallow']	

	# Histone H4 Amino Acid
	# human = "MSGRGKGGKGLGKGGAKRHRKVLRDNIQGITKPAIRRLARRGGVKRISGLIYEETRGVLKVFLENVIRDAVTYTEHAKRKTVTAMDVVYALKRQGRTLYGFGG"
	# sporothrix_schenckii = "MTGRGKGGKGLGKGGAKRHRKILRDNIQGITKPAIRRLARRGGVKRISGMIYEETRGVLKSFLEGVIRDAVTYTEHAKRKTVTSLDVVYALKRQGRTLYGFGG"
	# rhesus_monkey = "MSGRGKGGKGLGKGGAKRHRKVLRDNIQGITKPAIRRLARRGGVKRISGLIYEETRGVLKVFLENVIRDAVTYTEHAKRKTVTAMDVVYALKRQGRTLYGFGG"
	# lolium_temulentum = "MSGRGKGGKGLGKGGAKRHRKVLRDNIQGITKPAIRRLARRGGVKRISGLIYEETRGVLKIFLENVIRDAVTYTEHAXRKTVTAMDVVYALKRQGRTLYGFGG"
	# rabbit = "MSGRGKGGKGLGKGGAKRHRKVLRDNIQGITKPAIRRLARRGGVKRISGLIYEETRGVLKVFLENVIRDAVTYTEHAKRKTVTAMDVVYALKRQGRTLYGFGG"
	# Amino_Acid_List = [human, sporothrix_schenckii, rhesus_monkey, lolium_temulentum, rabbit]
	# mat = MakeDistanceMatrixFromData(Amino_Acid_List, "AA")
	# taxaList = ['human', 'sporothrix_schenckii', 'rhesus_monkey', 'lolium_temulentum', 'rabbit']
	
	# Histone H4 DNA
	# human = "ATGTCGGGACGTGGTAAAGGTGGTAAGGGATTAGGAAAAGGGGGCGCCAAAAGGCATCGGAAAGTGCTTCGCGATAACATTCAAGGGATTACTAAGCCAGCGATTAGACGTTTGGCGAGGAGGGGGGGAGTCAAGAGGATCTCTGGGTTAATATACGAGGAAACTCGTGGGGTCCTCAAGGTCTTCCTAGAAAACGTAATAAGAGACGCAGTAACGTACACCGAACACGCTAAGAGAAAGACGGTCACGGCAATGGATGTGGTCTATGCCTTAAAGCGCCAGGGAAGAACCCTCTACGGTTTTGGTGGT"
	# sporothrix_schenckii = "ATGACCGGTCGGGGTAAAGGTGGGAAGGGGCTTGGCAAAGGCGGTGCTAAGCGCCATCGGAAGATATTGCGGGATAATATTCAGGGGATCACGAAGCCAGCGATCAGGCGCCTAGCGAGGCGGGGTGGCGTTAAGCGAATTTCAGGAATGATTTATGAAGAAACGCGAGGAGTTTTAAAATCATTCCTTGAAGGGGTGATTCGCGACGCGGTTACCTATACCGAACACGCAAAACGCAAAACCGTCACCTCACTCGATGTGGTTTATGCTCTCAAGAGGCAAGGGAGGACGCTGTATGGATTCGGTGGG"
	# rhesus_monkey = "ATGAGCGGGAGAGGGAAAGGGGGGAAGGGGCTGGGTAAGGGTGGTGCGAAGCGTCATCGTAAAGTGCTGCGTGACAACATACAAGGAATAACTAAACCAGCGATTCGGCGTTTAGCCAGGAGAGGCGGTGTGAAGCGCATCTCTGGCCTGATTTACGAGGAAACGCGTGGGGTACTCAAAGTCTTCCTGGAAAATGTTATCCGAGATGCTGTCACGTATACCGAGCACGCAAAAAGGAAAACTGTCACGGCAATGGACGTGGTTTATGCCCTCAAGAGGCAGGGGCGAACACTTTACGGGTTCGGTGGG"
	# lolium_temulentum = "ATGTCTGGACGGGGAAAAGGTGGGAAGGGCCTCGGGAAAGGTGGAGCTAAACGTCACAGAAAGGTACTTCGGGACAACATACAAGGTATCACTAAGCCAGCAATCCGTAGGCTAGCTAGGCGCGGAGGAGTCAAGCGCATAAGCGGCCTCATCTACGAAGAAACCCGCGGAGTCTTGAAGATATTTCTAGAAAATGTCATCAGGGATGCAGTGACCTATACAGAGCATGCGGTCCGTAAAACTGTAACTGCCATGGACGTCGTATACGCACTTAAGCGTCAAGGTCGTACACTATATGGATTTGGGGGT"
	# rabbit = "ATGTCTGGACGAGGTAAGGGAGGCAAGGGCCTCGGGAAAGGCGGCGCGAAACGCCATCGCAAGGTTCTAAGGGATAACATTCAAGGAATAACGAAGCCTGCAATTCGTCGTCTAGCCAGGCGCGGTGGGGTCAAGCGCATTAGCGGCCTTATTTATGAGGAGACGAGAGGAGTTTTGAAAGTTTTTCTGGAAAACGTTATTAGGGACGCAGTGACGTACACGGAACATGCTAAACGTAAAACGGTCACAGCCATGGATGTCGTATACGCACTGAAGAGACAGGGGAGAACGCTGTACGGATTCGGAGGA"
	# DNA_List = [human, sporothrix_schenckii, rhesus_monkey, lolium_temulentum, rabbit]
	# taxaList = ['human', 'sporothrix_schenckii', 'rhesus_monkey', 'lolium_temulentum', 'rabbit']
	# mat = MakeDistanceMatrixFromData(DNA_List, "DNA")

	# AA ATP synthase F(0) complex subunit C1, mitochondrial precursor
	# human = "MQTAGALFISPALIRCCTRGLIRPVSASFLNSPVNSSKQPSYSNFPLQVARREFQTSVVSRDIDTAAKFIGAGAATVGVAGSGAGIGTVFGSLIIGYARNPSLKQQLFSYAILGFALSEAMGLFCLMVAFLILFAM"
	# rat = "MQTTKALLISPVLIRSCTRGLIRPVSASLLSRPEAPSKKPSCCSSPLQVARREFQTSVISRDIDTAAKFIGAGAATVGVAGSGAGIGTVFGSLIIGYARNPSLKQQLFSYAILGFALSEAMGLFCLMVAFLILFAM"
	# mouse = "MQTTKALLISPALIRSCTRGLIRPVSASLLSRPEAPSKQPSCSSSPLQVARREFQTSVISRDIDTAAKFIGAGAATVGVAGSGAGIGTVFGSLIIGYARNPSLKQQLFSYAILGFALSEAMGLFCLMVAFLILFAM"
	# pig = "MQTTGALLISPALLRSCTRGLIRPVSASFLSRPEIPSEQPPCSSVPLQVARREFQTSVVSRDIDTAAKFIGAGAATVGVAGSGAGIGTVFGSLIIGYARNPSLKQQLFSYAILGFALFEAMGLFCLMVAFLILFAM"
	# sheep = "MQTTGALLISPALIRSCTRGLIRPVSASFLSRPEIPSVQPSYSSGPLQVARREFQTSVVSRDIDTAAKFIGAGAATVGVAGSGAGIGTVFGSLIIGYARNPSLKQQLFSYAILGFALSEAMGLFCLMVAFLILFAM"
	# Amino_Acid_List = [human, rat, mouse, pig, sheep]
	# taxaList = ['human', 'rat', 'mouse', 'pig', 'sheep']
	# mat = MakeDistanceMatrixFromData(Amino_Acid_List, "AA")

	# DNA ATP synthase 
	human = "ATGCAGACCGCTGGAGCGTTGTTTATTTCTCCTGCGTTGATCCGTTGTTGCACTAGGGGTTTGATCCGGCCGGTCTCAGCAAGCTTCTTAAATAGCCCGGTGAACTCATCGAAACAGCCATCCTACTCAAACTTTCCACTACAGGTGGCAAGGAGGGAATTTCAGACCAGCGTAGTCTCAAGAGACATCGATACCGCCGCGAAGTTCATCGGAGCGGGGGCGGCCACTGTAGGTGTAGCCGGATCGGGCGCGGGTATTGGTACTGTGTTTGGATCATTAATAATAGGCTATGCGCGCAACCCTAGTCTAAAACAGCAATTATTTTCATACGCAATTCTTGGGTTCGCATTAAGCGAGGCGATGGGTCTTTTTTGCTTGATGGTCGCTTTCTTAATTCTATTCGCCATG"
	rat = "ATGCAGACCACTAAAGCGCTGCTCATTAGTCCAGTATTAATTCGGAGTTGCACCCGCGGATTAATTCGCCCTGTAAGCGCCTCTTTATTGTCCCGGCCGGAGGCACCTTCGAAGAAGCCATCCTGTTGTTCATCCCCGTTGCAAGTCGCAAGGCGAGAGTTTCAAACCTCCGTGATCTCCCGTGACATAGACACCGCCGCGAAATTTATAGGAGCCGGGGCTGCAACCGTGGGGGTAGCTGGATCAGGAGCTGGAATTGGAACGGTGTTTGGTTCTCTAATTATAGGTTACGCGCGCAACCCAAGCCTGAAGCAGCAGCTGTTCTCGTATGCGATTCTAGGATTTGCACTCAGCGAAGCCATGGGACTCTTCTGCCTTATGGTTGCCTTTCTAATTTTATTCGCAATG"
	mouse = "ATGCAGACAACCAAGGCCCTTCTGATATCGCCTGCCCTTATTCGGAGTTGTACTCGTGGCCTGATACGACCCGTTTCTGCTTCGCTCTTGTCGAGACCGGAAGCTCCCAGTAAACAACCCTCTTGTAGCTCATCACCATTACAAGTAGCCAGAAGAGAATTTCAGACTTCAGTTATAAGCCGAGATATCGATACAGCAGCAAAATTTATAGGAGCTGGTGCCGCAACAGTGGGAGTTGCAGGTAGTGGCGCTGGTATCGGTACCGTCTTCGGCAGCTTGATAATTGGGTATGCGCGTAACCCATCGCTAAAGCAACAACTCTTCTCTTACGCAATTCTTGGTTTTGCACTTTCCGAGGCGATGGGTCTATTCTGTCTGATGGTCGCATTTTTAATCCTGTTCGCCATG"
	pig = "ATGCAGACCACGGGCGCACTCTTAATTAGTCCAGCACTTTTACGCAGTTGCACGCGAGGGCTAATTCGGCCAGTATCCGCGTCATTCCTCTCTAGGCCAGAAATACCTTCTGAACAACCTCCTTGCAGCTCGGTGCCTCTTCAAGTTGCGCGTAGAGAATTCCAGACGAGCGTCGTCTCACGTGATATCGACACGGCTGCGAAGTTCATTGGTGCAGGGGCTGCCACAGTTGGGGTTGCCGGGTCCGGTGCGGGGATCGGGACGGTGTTTGGCTCTCTCATAATAGGCTACGCACGAAATCCATCGTTGAAACAGCAGTTATTCTCGTATGCTATTTTGGGTTTTGCTCTATTTGAGGCGATGGGTCTATTTTGCCTCATGGTAGCTTTTTTGATACTCTTTGCTATG"
	sheep = "ATGCAGACTACCGGTGCTTTGTTAATAAGCCCAGCACTTATACGTTCGTGTACCCGCGGTTTGATTCGCCCCGTCAGTGCTTCATTCTTGTCCCGCCCTGAAATCCCTTCAGTGCAACCCAGTTACTCTTCCGGGCCTCTACAGGTAGCTCGCAGGGAATTTCAAACATCCGTAGTTAGTAGAGATATAGACACAGCAGCGAAATTTATTGGCGCTGGTGCCGCTACGGTAGGTGTGGCCGGTTCTGGCGCCGGCATCGGGACAGTTTTTGGAAGCCTTATCATAGGGTATGCAAGGAATCCGTCCCTTAAGCAGCAGCTATTTAGTTACGCGATACTCGGTTTTGCTCTATCTGAGGCGATGGGCCTATTCTGCCTCATGGTGGCTTTTCTTATACTATTCGCAATG"
	Amino_Acid_List = [human, rat, mouse, pig, sheep]
	taxaList = ['human', 'rat', 'mouse', 'pig', 'sheep']
	mat = MakeDistanceMatrixFromData(Amino_Acid_List, "DNA")

	# AA MC1R(freckles)
	# human = "MAVQGSQRRLLGSLNSTPTAIPQLGLAANQTGARCLEVSISDGLFLSLGLVSLVENALVVATIAKNRNLHSPMYCFICCLALSDLLVSGSNVLETAVILLLEAGALVARAAVLQQLDNVIDVITCSSMLSSLCFLGAIAVDRYISIFYALRYHSIVTLPRARRAVAAIWVASVVFSTLFIAYYDHVAVLLCLVVFFLAMLVLMAVLYVHMLARACQHAQGIARLHKRQRPVHQGFGLKGAVTLTILLGIFFLCWGPFFLHLTLIVLCPEHPTCGCIFKNFNLFLALIICNAIIDPLIYAFHSQELRRTLKEVLTCSW"
	# yak = "MPALGSQRRLLGSLNCTPPATLPFTLAPNRTGPQCLEVSIPDGLFLSLGLVSLVENVLVVAAIAKNRNLHSPMYYFICCLAVSDLLVSVSNVLETAVMLLLEAGVLATQAAVVKQLDNVIDVLICGSMVSSLCFLGAIAVDPYISIFYALRYHSVVTLPRAWRIIAAIWVASILTSLLFITYYNHKVILLCLVGLFIAMLALMAVLYVHMLARACQHARGIARLQKRQRPIHQGFGLKGAATLTILLGVFFLCWGPFFLHLSLIVLCPQHPTCGCIFKNFNLFLALIICNTIVDPLIYAFRSQELRKTLQEVLQCSW"
	# alpaca = "MPVLGPQRRLLGSLNSTPQATTHLGLAANQTGPQCLEVSVPDGLFLSLGLVSLVENVLVVAAITKNRNLHSPMYYFICCLAASDLLVSMSNVLETAVMLLLEAGALATWATVVQQLDNVMDVLICGSMVSSLCSLGAIAVDRYISIFYALRYHSIVTLPRAWRAIAAIWVASVLSSTLFITYYDHTAVLLCLVSFFVAMLALMAVLYVHMLARACQHARGIAQLHKRQRPIHQGFGLKGVATLTILLGIFFLCWGPFFLHLFLIVLCPQHPTCGCIFKNFNLFLALIICNSIVDPLIYAFRSQELRKTLQEVLQCSW"
	# dog = "MSGQGPQRRLLGSLNGTSPATPHFELAANQTGPRCLEVSIPDGLFLSLGLVSVVENVLVVAAIAKNRNLHSPMYYFIGCLAVSDLLVSVSNVLETAVMLLVAAGALAAQAAVVQQLDDIIDVLICGSMVSSLCFLGAIAVDRYLSIFYALRYHSIVTLPRAWRAISAIWVASVLSSTLFIAYYNHTAVLLCLVSFFVAMLVLMAVLYVHMLARACQHARGIARLHKRQHFIPQGFGLKGAATLTILLGIFFLCWGPFFLHLSLVVLCPQHPICGCVFQNFNLFLTLIICNSIIDPFIYAFRSQELRKTLQEVVLCSW"
	# Amino_Acid_List = [human, yak, alpaca, dog]
	# taxaList = ['human', 'yak', 'alpaca', 'dog']
	# mat = MakeDistanceMatrixFromData(Amino_Acid_List, "AA")

	# DNA MC1R(freckles)
	# human = "ATGGCAGTTCAGGGATCACAACGTCGTCTTCTCGGTAGCCTCAACTCAACGCCAACGGCGATTCCCCAGTTGGGGCTCGCTGCCAATCAAACAGGCGCTAGATGTCTCGAAGTTAGTATTTCGGATGGCCTTTTCTTAAGCCTAGGACTAGTAAGCTTAGTAGAAAATGCCTTGGTCGTAGCAACTATAGCAAAGAACCGAAACCTGCATTCTCCAATGTATTGTTTTATCTGCTGTTTGGCACTATCTGACCTTTTGGTGAGTGGATCCAATGTCTTGGAAACGGCTGTTATTCTGTTGCTTGAGGCGGGGGCCCTGGTTGCGAGAGCTGCTGTCCTGCAACAATTGGACAACGTTATTGATGTCATCACCTGCTCATCAATGCTATCCTCTTTATGTTTCCTGGGAGCGATAGCCGTAGATCGGTACATAAGCATATTTTATGCGTTGCGGTACCACAGCATCGTCACCCTACCCAGGGCTCGGCGTGCTGTAGCGGCAATTTGGGTTGCGAGCGTGGTATTCAGTACACTGTTTATCGCTTACTATGACCACGTGGCTGTTCTCCTCTGTCTCGTTGTTTTCTTCTTAGCCATGCTGGTACTAATGGCCGTCCTCTATGTTCATATGCTCGCACGCGCGTGTCAACACGCACAAGGTATTGCTAGACTTCATAAGCGTCAACGTCCTGTCCACCAGGGTTTTGGCCTAAAAGGCGCTGTAACGCTCACGATACTGCTGGGCATCTTCTTCCTCTGTTGGGGTCCATTTTTTTTACATTTGACCCTAATTGTACTATGTCCCGAGCACCCAACATGCGGCTGTATCTTTAAAAATTTCAATCTATTTCTTGCCCTTATAATTTGTAACGCCATAATCGATCCGTTAATATATGCATTCCATTCTCAAGAGCTTAGACGAACACTGAAAGAAGTTTTGACATGTTCATGG"
	# yak = "ATGCCGGCGTTAGGCTCCCAGCGACGACTTCTAGGGTCGCTTAACTGCACCCCCCCTGCAACACTGCCCTTCACACTGGCTCCGAACCGAACTGGCCCCCAGTGTCTAGAAGTCTCCATCCCGGACGGCCTTTTTTTATCCCTGGGCCTTGTCTCTTTGGTGGAAAACGTGTTGGTGGTAGCGGCTATAGCTAAGAATAGGAATCTACATTCGCCAATGTACTACTTTATTTGTTGTCTCGCAGTATCGGACCTCCTCGTGTCAGTGAGCAATGTACTGGAGACGGCGGTCATGCTGTTACTAGAAGCAGGAGTCCTTGCGACACAGGCTGCTGTCGTGAAGCAACTTGATAATGTGATTGATGTGTTAATATGCGGGAGCATGGTAAGTTCTTTGTGTTTCCTGGGAGCTATAGCTGTGGATCCCTATATATCTATTTTTTATGCCTTGAGATATCATAGTGTCGTTACATTACCTCGTGCGTGGCGAATTATAGCTGCGATATGGGTTGCATCTATCCTAACTTCACTGCTTTTCATTACGTACTACAACCATAAGGTGATATTATTATGCTTAGTCGGCTTGTTTATCGCTATGCTCGCTCTGATGGCAGTACTATATGTACATATGCTGGCTCGCGCATGCCAGCACGCGCGAGGAATTGCCAGATTGCAGAAGCGACAAAGGCCAATACATCAAGGATTCGGTCTTAAGGGAGCGGCAACACTAACGATTCTACTTGGAGTGTTCTTTCTATGTTGGGGTCCTTTCTTCTTGCACTTATCCTTAATCGTGCTATGCCCCCAACATCCTACTTGCGGGTGCATATTCAAAAATTTCAATCTATTTCTCGCACTTATCATCTGTAACACCATTGTTGACCCGCTGATTTATGCCTTCCGGTCACAGGAACTTAGAAAAACCTTACAGGAGGTCCTTCAATGCTCTTGG"
	# alpaca = "ATGCCGGTCTTGGGCCCCCAAAGACGGTTATTGGGTTCCCTGAACTCCACGCCTCAGGCGACAACACATTTAGGCTTGGCCGCAAATCAAACGGGCCCCCAATGCCTCGAGGTGTCCGTTCCGGACGGTTTGTTTCTATCACTTGGGTTGGTTTCCCTGGTCGAAAATGTACTAGTAGTAGCTGCAATTACCAAGAACAGGAATCTACATTCACCAATGTACTACTTTATCTGTTGCTTAGCAGCGTCAGATCTTCTGGTATCTATGTCCAACGTACTGGAGACGGCAGTAATGCTGTTGCTGGAAGCGGGAGCTCTAGCGACCTGGGCAACAGTAGTACAACAGCTGGACAACGTGATGGACGTACTGATCTGTGGGTCCATGGTCTCCTCCCTTTGCTCTTTAGGAGCGATTGCTGTGGACAGATATATTAGTATCTTTTACGCGTTGCGTTACCACAGCATCGTCACACTACCCCGCGCTTGGCGGGCGATAGCAGCCATCTGGGTAGCCTCGGTCCTAAGCAGCACTTTATTCATTACCTACTATGATCACACCGCCGTCTTGCTATGTTTGGTTTCTTTTTTCGTGGCAATGCTCGCTCTAATGGCCGTATTATATGTGCATATGTTAGCACGGGCTTGCCAACACGCTCGAGGGATAGCGCAATTACATAAAAGGCAGAGACCCATCCACCAAGGATTTGGGCTAAAGGGAGTGGCCACACTTACGATATTATTAGGCATTTTCTTTCTGTGTTGGGGTCCCTTTTTCTTGCATCTTTTCCTGATCGTCTTATGTCCTCAGCATCCGACTTGCGGCTGTATCTTTAAAAACTTCAACCTGTTCTTGGCTCTCATCATCTGCAACTCAATAGTAGATCCCCTGATCTACGCGTTTAGGAGTCAAGAGTTACGAAAAACCCTCCAGGAAGTCCTACAGTGTAGTTGG"
	# dog = "ATGAGCGGGCAGGGTCCGCAGCGCAGGTTGTTGGGGTCATTAAATGGAACCTCACCCGCGACGCCTCATTTTGAGCTGGCTGCGAATCAGACGGGTCCCAGATGCCTTGAGGTATCGATACCGGACGGATTGTTCCTGTCTTTGGGCCTTGTTTCTGTAGTAGAGAATGTACTAGTTGTAGCCGCGATAGCAAAGAACCGCAACTTGCACTCCCCTATGTACTATTTTATCGGCTGCCTGGCGGTGTCTGATCTCCTCGTATCTGTCTCGAACGTACTCGAGACCGCCGTCATGCTACTCGTCGCTGCGGGGGCGTTGGCCGCCCAGGCTGCCGTAGTTCAACAACTCGACGACATAATTGATGTCCTGATATGTGGTTCCATGGTAAGCTCTCTGTGTTTCCTGGGGGCTATTGCCGTGGATCGGTACCTCTCTATATTTTACGCCCTGCGCTACCATTCTATCGTAACCCTACCTCGTGCGTGGAGGGCGATTAGCGCAATCTGGGTGGCCTCGGTCCTGTCTTCGACATTGTTTATTGCTTACTACAATCACACCGCGGTCTTGCTGTGTTTAGTTTCCTTCTTTGTTGCCATGTTGGTCTTAATGGCGGTGCTGTATGTACATATGCTAGCCCGGGCATGCCAACATGCAAGAGGCATCGCGCGACTACATAAACGTCAACACTTCATACCGCAGGGATTCGGACTTAAGGGCGCAGCAACTCTGACCATACTCCTAGGGATTTTTTTTCTGTGTTGGGGACCATTCTTCTTACATTTGAGTCTTGTTGTCTTATGCCCGCAACATCCCATATGTGGCTGTGTTTTTCAGAACTTTAATTTATTTCTAACGCTAATCATCTGTAACTCTATAATTGATCCATTCATCTATGCCTTCCGGAGCCAAGAGTTGCGAAAGACTTTACAGGAGGTCGTGCTCTGTAGTTGG"
	# Amino_Acid_List = [human, yak, alpaca, dog]
	# taxaList = ['human', 'yak', 'alpaca', 'dog']
	# mat = MakeDistanceMatrixFromData(Amino_Acid_List, "DNA")

	# DNA PCSK1 (cholesterol regulator)
	# human = "ATGGGAACTGTGTCAAGTCGCCGGTCCTGGTGGCCGTTGCCGTTGTTGCTGTTACTGCTTCTACTGCTTGGTCCAGCGGGTGCCCGAGCACAAGAGGATGAAGACGGCGATTATGAAGAACTCGTCTTGGCGTTGCGATCTGAAGAGGATGGACTTGCTGAGGCCCCAGAGCACGGGACCACTGCCACTTTTCACCGTTGCGCGAAAGACCCCTGGCGCCTTCCAGGAACGTACGTGGTCGTGCTTAAGGAAGAAACTCACTTAAGTCAGTCAGAGAGGACAGCTCGGCGGCTACAGGCGCAGGCGGCAAGACGCGGCTATTTGACTAAAATCTTACATGTCTTTCACGGACTATTACCCGGCTTTCTTGTCAAAATGAGCGGAGATCTTCTCGAGTTAGCTCTTAAACTCCCACACGTAGACTATATAGAAGAGGACTCTTCAGTATTTGCGCAATCGATTCCCTGGAACTTAGAAAGGATCACGCCACCACGCTACCGTGCGGACGAGTACCAACCGCCCGACGGAGGCTCGTTAGTGGAGGTTTATCTTCTTGATACTTCTATCCAAAGCGATCATCGAGAGATCGAAGGACGAGTGATGGTGACTGATTTTGAGAACGTCCCTGAAGAAGACGGTACCCGATTCCACCGACAGGCTAGTAAATGTGATAGCCACGGGACTCACTTGGCTGGTGTTGTTTCAGGTAGAGATGCAGGTGTCGCTAAAGGAGCATCAATGCGCAGTCTACGGGTATTGAACTGCCAAGGAAAGGGCACCGTGTCAGGCACGCTCATAGGTTTGGAATTCATCCGGAAGTCACAACTTGTGCAACCAGTAGGTCCTTTAGTCGTTCTGCTTCCACTCGCGGGTGGCTATTCACGTGTATTGAATGCTGCCTGCCAACGTCTAGCACGCGCTGGAGTGGTGTTAGTGACTGCTGCCGGTAATTTCAGGGACGACGCGTGCCTATATTCTCCCGCATCCGCCCCTGAAGTGATTACGGTAGGAGCTACTAATGCGCAAGATCAACCCGTCACTCTTGGCACTCTGGGGACTAACTTCGGCCGTTGTGTTGATCTTTTTGCCCCCGGAGAAGACATTATCGGGGCCTCAAGCGATTGCTCCACGTGCTTCGTCAGCCAGTCTGGGACCAGTCAAGCCGCAGCACACGTTGCGGGTATCGCCGCAATGATGTTATCCGCGGAGCCTGAATTAACCTTGGCGGAACTCAGGCAGCGGCTAATTCATTTTTCGGCTAAGGATGTTATAAACGAGGCCTGGTTCCCGGAAGATCAGAGGGTCCTGACTCCAAATCTGGTGGCAGCGCTTCCCCCATCAACACACGGGGCAGGATGGCAGCTCTTCTGCAGGACGGTATGGTCCGCACATTCTGGGCCTACTAGAATGGCTACAGCTGTGGCGCGCTGCGCCCCGGATGAAGAGTTACTCTCATGCTCAAGCTTCTCACGGTCCGGAAAACGGAGAGGTGAGAGGATGGAAGCTCAAGGTGGTAAACTTGTATGCCGCGCGCACAACGCGTTTGGCGGAGAGGGCGTTTATGCGATCGCGAGGTGCTGCTTACTCCCACAGGCAAACTGTTCGGTGCACACTGCCCCTCCCGCTGAGGCTTCCATGGGCACGCGTGTACACTGTCATCAACAAGGCCATGTGCTTACAGGCTGTTCCTCCCACTGGGAGGTCGAGGATCTCGGTACCCACAAACCACCGGTACTTCGTCCCCGCGGCCAGCCAAACCAGTGCGTCGGCCATAGAGAGGCATCTATCCACGCGTCTTGCTGTCACGCGCCAGGCTTAGAATGTAAGGTAAAAGAACACGGGATACCAGCCCCACAAGAGCAAGTAACAGTGGCTTGCGAGGAGGGATGGACCCTAACCGGCTGTAGTGCCCTACCTGGTACCTCACATGTCTTGGGTGCGTACGCAGTTGATAACACATGCGTGGTGCGATCCCGGGACGTGAGCACAACCGGTTCTACTTCGGAGGGTGCGGTTACCGCTGTAGCAATTTGTTGTAGGTCGCGACACTTAGCCCAGGCGTCGCAGGAACTCCAG"
	# chimpanzee = "ATGGGCACAGTCTCATCTCGGCGCTCTTGGTGGCCACTACCTCTTCTTCTCCTACTTCTATTGCTTTTGGGACCGGCCGGAGCCCGCGCGCAAGAGGATGAGGATGGAGACTACGAGGAATTAGTCCTGGCGCTCCGCTCCGAAGAGGACGGGTTAGCGGAGGCGCCGGAACACGGTACAACCGCCACATTCCATAGATGTGCCAAGGATCCCTGGAGATTGCCCGGCACATACGTCGTCGTTTTAAAGGAAGAAACCCACCTCTCTCAGTCCGAACGAACGGCTAGACGGCTCCAAGCTCAAGCCGCGAGAAGAGGCTACTTGACGAAAATATTACATGTCTTTCACGGGCTGTTACCGGGGTTTTTGGTTAAAATGAGCGGGGATCTGTTAGAACTTGCGCTAAAATTGCCGCATGTTGATTACATTGAAGAAGATTCTAGCGTTTTTGCGCAGTCAATTCCTTGGAACTTAGAACGGATTACCCCACCCCGCTATCGGGCCGATGAGTACCAACCGCCAGACGGTGGGAGCCTGGTGGAGGTGTACCTTCTGGATACGTCAATTCAATCTGATCACAGAGAGATTGAAGGTCGGGTAATGGTTACGGACTTCGAGAACGTACCCGAGGAAGATGGAACCAGATTCCATAGACAGGCCTCTAAATGCGACAGCCATGGGACTCACCTCGCAGGAGTAGTCTCGGGCCGTGATGCGGGAGTTGCCAAAGGGGCGAGTATGCGTTCGTTGCGGGTACTTAATTGCCAAGGAAAAGGCACCGTTAGCGGTACACTTATCGGTCTCGAGTTTATTCGTAAATCCCAGTTGGTTCAACCCGTAGGCCCGTTGGTGGTCCTGCTGCCTCTTGCCGGCGGCTATTCGCGTGTATTAAATGCCGCTTGTCAGCGTCTCGCAAGGGCGGGGGTTGTTCTTGTAACTGCGGCCGGAAACTTTCGGGATGACGCTTGTCTGTACTCACCAGCATCGGCGCCGGAGGTCATAACTGTTGGGGCTACGAACGCCCAAGATCAACCTGTGACTCTGGGTACACTGGGAACAAATTTCGGTCGGTGTGTGGATTTATTCGCGCCCGGAGAAGACATCATTGGAGCCTCATCTGACTGCTCCACATGCTTTGTGTCGCAGTCAGGTACTAGCCAAGCGGCTGCCCACGTTGCTGGGATCGCAGCGATGATGCTGAGCGCAGAACCGGAATTGACTTTAGCTGAACTGCGGCAACGCCTAATTCATTTTAGCGCCAAAGACGTAATCAACGAAGCTTGGTTTCCTGAAGATCAGAGAGTCTTAACGCCCAATCTGGTCGCTGCACTTCCCCCCTCGACACATGGAGCTGGGTGGCAGTTGTTTTGCCGCACGGTCTGGTCCGCACATAGCGGGCCTACACGCATGGCAACAGCCGTTGCTAGATGTGCGCCCGACGAGGAACTCTTATCTTGCTCAAGCTTTTCCCGCTCGGGCAAGAGACGCGGGGAAAGGATGGAAGCACAGGGGGGGAAACTCGTCTGTCGTGCTCACAACGCGTTCGGAGGAGAAGGCGTGTATGCAATCGCAAGATGTTGCCTCCTTCCGCAGGCGAATTGCTCGATTCATACCGCACCTCCCGCGGAGGCGGGAATGGGCACCCGGGTGCATTGCCACCAGCAAGGCCACGTCCTGACCGGTTGCTCTTCGCACTGGGAGGTAGAAGACCTAGGCACCCACAAACCTCCGATGTTGCGACCCCGAGGTCAACCTAACCAATGTGTTGGCCATCGCGAAGCCAGCATACATGCGTCGTGTTGTCGAGCACCGGGGCTAGAGTGCAAAGTTAAAGAGCACGGAATACCAGCTCCTCAGGAACAGGTTACCGTGGCATGTGAGGAGGGTTGGACGCTCACTGGATGTAGCGCTCTTCCGGGCACATCTCATGTTCTAGGGGCGTACGCTGTCGATAACACATGCGTAGTTAGGTCGAGAGACGTTAGTACAGCTGGTAGCACTTCAGAAGAGGCGGTGGCTGCTGTGGCGATATGCTGCCGTTCCAGACACCTAGCCCAAGCGTCCCAAGAGTTACAA"
	# macaca_nemestrina = "ATGGGGACAGTATCGTCCCGCCGATCATGGTGGCCTTTACCACTTCCCTTACTCCTCCTTCTCCTTTTGGGACCTGCGGGCGCTAGAGCGCAGGAAGACGAAGACGGCGACTATGAGGAATTAGTCTTAGCTCTGCGGTCAGAAGAAGACGGCCTGGCCGACGCCCCAGAGCACGGAGCCACAGCTACATTTCACCGGTGCGCTAAGGACCCTTGGAGACTTCCTGGAACTTATGTAGTCGTCTTGAAAGAGGAGACACATCGATCACAGAGTGAGCGCACAGCCAGACGCTTACAGGCTCAGGCTGCGCGACGGGGGTATCTCACCAAGATACTACACGTTTTCCACCACCTGTTGCCTGGGTTTTTGGTTAAGATGAGCGGGGACCTACTGGAACTGGCGCTCAAACTACCACATGTTGATTACATTGAAGAAGACTCTAGCGTATTTGCTCAATCAATCCCATGGAATCTCGAGCGGATTACACCGGCTCGATATAGAGCTGACGAGTATCAACCACCCAAAGGGGGTTCGCTGGTAGAGGTTTATTTGCTCGACACTTCGATTCAGTCCGACCACCGTGAGATTGAAGGACGCGTTATGGTAACCGACTTTGAGAGTGTCCCCGAGGAGGATGGGACTCGATTTCACCGGCAGGCTTCGAAATGCGATTCTCACGGTACCCATCTTGCAGGCGTTGTTTCAGGTCGTGATGCAGGAGTGGCCAAGGGAGCAGGCCTGCGAAGCCTGCGGGTCCTGAATTGTCAAGGTAAGGGAACTGTGTCCGGAACGCTTATAGGTCTTGAATTCATAAGGAAAAGTCAGCTAGTTCAGCCTGTGGGCCCATTGGTCGTTCTACTTCCTCTTGCGGGCGGCTATAGTCGAGTATTCAACGCGGCGTGTCAGAGACTCGCACGCGCCGGAGTGGTCCTCGTCACTGCGGCAGGTAACTTTCGCGATGATGCATGCCTTTATAGCCCGGCTTCAGCGCCGGAGGTAATCACCGTCGGGGCAACTAACGCGCAGGATCAACCGGTAACTCTCGGGACCCTAGGTACGAATTTTGGCCGCTGTGTCGACTTATTTGCACCGGGGGAGGATATAATCGGCGCATCGTCCGACTGCAGCACCTGCTTCGTTTCCCGCTCCGGTACATCGCAAGCGGCGGCGCACGTGGCTGGTATAGCGGCTATGATGCTATCAGCTGAACCAGAGCTGACATTAGCAGAATTGAGGCAGCGGTTAATTCATTTCTCTGCTAAAGACGTGATCAACGAGGCATGGTTCCCTGAGGATCAAAGGGTTTTGACACCAAATCTTGTGGCAGCCCTTCCTCCCAGTACTCACAGAGCTGGCTGGCAATTATTTTGCCGGACCGTGTGGAGCGCTCATAGTGGTCCCACAAGGATGGCGACGGCTGTTGCCCGTTGCGCTCAAGACGAGGAATTATTATCGTGTTCATCATTCAGTCGCTCCGGAAAACGACGAGGAGAGCGTATCGAAGCGCAAGGCGGTAAGCGGGTGTGCAGAGCCCATAATGCCTTCGGAGGCGAAGGTGTGTACGCCATTGCCAGATGCTGCTTGCTTCCGCAGGTAAACTGTTCTGTGCACACAGCGCCACCCGCTGGTGCATCAATGGGTACGAGAGTTCACTGCCACCAACAAGGCCACGTGCTCACTGGGTGTAGTTCGCACTGGGAGGTCGAAGATTTAGGGACCCATAAACCGCCGGTCCTACGGCCACGGGGCCAACCAAATCAGTGTGTTGGTCATAGGGAGGCTTCGATTCACGCTTCGTGTTGTCACGCTCCGGGACTTGAGTGCAAGGTAAAAGAGCATGGCATACCAGCGCCCCAGGAGCAGGTTATAGTTGCTTGTGAAGATGGATGGACCTTAACTGGCTGCAGCGCGCTACCCGGAACCAGTCATGTATTGGGTGCCTACGCCGTCGACAACACCTGCGTGGTACGCTCTAGAGACGTATCCACGACGGGAAGCACATCGGAGGAAGCTGTTGCGGCCGTAGCTATCTGCTGTAGGTCCAGGCACCTAGTACAGGCCAGCCAGGAACTACAA"
	# orca = "ATGGGAACGGGCTCAAGTCGTAGGCCCTGGTGGCCGCCACTTCTACTATTACTATTACTGTTGTTAGGTCCCGCGGGCGCACGTGCCCAAGAGGATGAGGATGGAGATTATGAGGAACTCGTTTTAGCCTTCCGGTCCGAAGAGGACTCGTCAGCCGACACAGCACAAAACGTTGCCACCGCTACTTTTCACCGATGCGCTAAGGACGCTTGGCGGTTACCAGGTACATACATGGTCGTGCTGAAGCAAGAGACCCACAGGTCCCAGACCGAGCGTACCGCGAGGAGGCTGCAGGCACAAGCGGCACATCGTGGTTATCTAACTAAGATTCTACACGTGTTCCATGATCTTGTTCCCGGTTTCCTAGTTAAGATGTCTGGGGACTTACTTGAGTTAGCTCTGACTTTGCCTCACGTTCAGTACATTGAGGAGGACAGTCTAGTCTTCGCGCAATCAATACCATGGAATCTAGAAAGGATACTACCGACGAGAAGGCAAGCGGATGAGCATCACGCGCCTACCGGCGGTGGTTTAGTCGAAGTTTACCTCCTAGATACGTCCATTCAATCTGGTCATAGGGAAATAGAGGGTAGAGTGGTTGTGACGGACTTTGAAAATGTTCCCGAGGAGGACGGAACCCGTTTTCACAGGCAGGCGAATAAGTGTGATTCGCATGGTACCCATCTGGCCGGCGTGGTTTCAGGTCGAGACGCCGGGGTTGCGAAAGGGGCTTCATTAAGATCACTAAGAGTATTGAACTGCCAGGGGAAAGGCACTGTGTCGTCGACGCTAACGGGGTTGGAGTTTATTAGGAAGTCACAGCTGGCGCAGCCAGCTGGACGACTAGTGGTTCTACTACCTCTAGCTGGCGGATACAGCCCAGCACTGAATGCGGCATGTCAGCAGCTTGCCGGCACCGGTGCCGTTCTTGTGGCCGCTGCGGGAAACTTCAGAGACGACGCGTGCCTTTACTCTCCGGCATCAGCACCCGAGGTAATAACCGTGGGTGCAACTAATGCACAAGATCAACCAGTTACGCTCGGAGTATTGGGCACCAACTTCGGCAGGTGCGTGGATCTCTTTGCTCCTGGTGACGATATTATTGGTGCAAGCTCGGATTGTTCCACTTGCTTCACGTCACAATCCGGGACGTCTCAAGCGGCGGCTCATGTCGCCGGCATCGTCGCGAGAATGTTAACGGCCGAGCCCGAGTTAACACTAGCTGAACTCCGGCAGAGGCTTATCAGGTTCTCCGCGAAGGATGTCATTAACGAAGCATGGTTCCCCGAGGACCAGCGGGTTCTTACGCCGAATCTGGTCGCAACCCTGCCCCCGTCCACCTACGGCGCCGGCGGGCAGCTTTTTTGCCGTACTGTATGGTCGGCCCATTCCGGCCCAACTCGAATGGCGACAGCCGAAGCAAGGTGTGCGGCCCCAGAAGAGTTATTAGGCTGTTCGTCCTTCTCGAGGAGCGGTAAACGCCGAGGAGAGCGAATAGAGGCCCGGGGTGGACGTAGGATATGCTTGGCACATAACGCATTTGGCGGTGAGGGAGTATATGCAGTAGCCAGATGCTGCTTGCTACCCCGCGCCAACTGCCGAGTCCACACCGCCCCGCCAGCGGGGGCCGGCGTTCAGACACAGGCACGCTGCCCTCAGCATGGGCAGGTCTTAACAGGATGTTCTTCACATTGGGAGGTTGAGGATCCGGGCACGCCGAGGCGACCGGTGTTAAGACCCCGCGGGCAACCTGATCAATGCGTCGGCCACAAAGAGGCATCGATACATGCCAGCTGTTGTCACGCCCCCGGGCTTGAGTGCAAAGTGCGGGAACATGGCATACCCGGACCTGCCGAGAAGGTGACTGTTGCATGCGAAGGAGGTTGGACACTCACGTCTTGTGGGACACTGCCAGGAGCGTGGCCTGCTCTTGGTGCATACGCCGTTGACAACACTTGTGTTGTAAGGGGTCGAGACATTGGTGCAGGTGGCCGGACGGGGGAGGAGGCCACAGTAGCAATAGCTATATGTTGTAGGTCGAGGCCGTCGGGTGAGCAAGCGTCCCAGGAGGCCCAG"
	# DNA_List = [human, chimpanzee, macaca_nemestrina, orca]
	# taxaList = ['human', 'chimpanzee', 'macaca_nemestrina', 'orca']
	# mat = MakeDistanceMatrixFromData(DNA_List, "DNA")

	# AA PCSK1 (cholesterol regulator) DOESN'T WORK FOR SOME REASON
	# human = "MGTVSSRRSWWPLPLLLLLLLLLGPAGARAQEDEDGDYEELVLALRSEEDGLAEAPEHGTTATFHRCAKDPWRLPGTYVVVLKEETHLSQSERTARRLQAQAARRGYLTKILHVFHGLLPGFLVKMSGDLLELALKLPHVDYIEEDSSVFAQSIPWNLERITPPRYRADEYQPPDGGSLVEVYLLDTSIQSDHREIEGRVMVTDFENVPEEDGTRFHRQASKCDSHGTHLAGVVSGRDAGVAKGASMRSLRVLNCQGKGTVSGTLIGLEFIRKSQLVQPVGPLVVLLPLAGGYSRVLNAACQRLARAGVVLVTAAGNFRDDACLYSPASAPEVITVGATNAQDQPVTLGTLGTNFGRCVDLFAPGEDIIGASSDCSTCFVSQSGTSQAAAHVAGIAAMMLSAEPELTLAELRQRLIHFSAKDVINEAWFPEDQRVLTPNLVAALPPSTHGAGWQLFCRTVWSAHSGPTRMATAVARCAPDEELLSCSSFSRSGKRRGERMEAQGGKLVCRAHNAFGGEGVYAIARCCLLPQANCSVHTAPPAEASMGTRVHCHQQGHVLTGCSSHWEVEDLGTHKPPVLRPRGQPNQCVGHREASIHASCCHAPGLECKVKEHGIPAPQEQVTVACEEGWTLTGCSALPGTSHVLGAYAVDNTCVVRSRDVSTTGSTSEGAVTAVAICCRSRHLAQASQELQ"
	# chimpanzee = "MGTVSSRRSWWPLPLLLLLLLLLGPAGARAQEDEDGDYEELVLALRSEEDGLAEAPEHGTTATFHRCAKDPWRLPGTYVVVLKEETHLSQSERTARRLQAQAARRGYLTKILHVFHGLLPGFLVKMSGDLLELALKLPHVDYIEEDSSVFAQSIPWNLERITPPRYRADEYQPPDGGSLVEVYLLDTSIQSDHREIEGRVMVTDFENVPEEDGTRFHRQASKCDSHGTHLAGVVSGRDAGVAKGASMRSLRVLNCQGKGTVSGTLIGLEFIRKSQLVQPVGPLVVLLPLAGGYSRVLNAACQRLARAGVVLVTAAGNFRDDACLYSPASAPEVITVGATNAQDQPVTLGTLGTNFGRCVDLFAPGEDIIGASSDCSTCFVSQSGTSQAAAHVAGIAAMMLSAEPELTLAELRQRLIHFSAKDVINEAWFPEDQRVLTPNLVAALPPSTHGAGWQLFCRTVWSAHSGPTRMATAVARCAPDEELLSCSSFSRSGKRRGERMEAQGGKLVCRAHNAFGGEGVYAIARCCLLPQANCSIHTAPPAEAGMGTRVHCHQQGHVLTGCSSHWEVEDLGTHKPPMLRPRGQPNQCVGHREASIHASCCRAPGLECKVKEHGIPAPQEQVTVACEEGWTLTGCSALPGTSHVLGAYAVDNTCVVRSRDVSTAGSTSEEAVAAVAICCRSRHLAQASQELQ"
	# macaca_nemestrina = "MGTVSSRRSWWPLPLPLLLLLLLGPAGARAQEDEDGDYEELVLALRSEEDGLADAPEHGATATFHRCAKDPWRLPGTYVVVLKEETHRSQSERTARRLQAQAARRGYLTKILHVFHHLLPGFLVKMSGDLLELALKLPHVDYIEEDSSVFAQSIPWNLERITPARYRADEYQPPKGGSLVEVYLLDTSIQSDHREIEGRVMVTDFESVPEEDGTRFHRQASKCDSHGTHLAGVVSGRDAGVAKGAGLRSLRVLNCQGKGTVSGTLIGLEFIRKSQLVQPVGPLVVLLPLAGGYSRVFNAACQRLARAGVVLVTAAGNFRDDACLYSPASAPEVITVGATNAQDQPVTLGTLGTNFGRCVDLFAPGEDIIGASSDCSTCFVSRSGTSQAAAHVAGIAAMMLSAEPELTLAELRQRLIHFSAKDVINEAWFPEDQRVLTPNLVAALPPSTHRAGWQLFCRTVWSAHSGPTRMATAVARCAQDEELLSCSSFSRSGKRRGERIEAQGGKRVCRAHNAFGGEGVYAIARCCLLPQVNCSVHTAPPAGASMGTRVHCHQQGHVLTGCSSHWEVEDLGTHKPPVLRPRGQPNQCVGHREASIHASCCHAPGLECKVKEHGIPAPQEQVIVACEDGWTLTGCSALPGTSHVLGAYAVDNTCVVRSRDVSTTGSTSEEAVAAVAICCRSRHLVQASQELQ"
	# # orca = "MGTGSSRRPWWPPLLLLLLLLLGPAGARAQEDEDGDYEELVLAFRSEEDSSADTAQNVATATFHRCAKDAWRLPGTYMVVLKQETHRSQTERTARRLQAQAAHRGYLTKILHVFHDLVPGFLVKMSGDLLELALTLPHVQYIEEDSLVFAQSIPWNLERILPTRRQADEHHAPTGGGLVEVYLLDTSIQSGHREIEGRVVVTDFENVPEEDGTRFHRQANKCDSHGTHLAGVVSGRDAGVAKGASLRSLRVLNCQGKGTVSSTLTGLEFIRKSQLAQPAGRLVVLLPLAGGYSPALNAACQQLAGTGAVLVAAAGNFRDDACLYSPASAPEVITVGATNAQDQPVTLGVLGTNFGRCVDLFAPGDDIIGASSDCSTCFTSQSGTSQAAAHVAGIVARMLTAEPELTLAELRQRLIRFSAKDVINEAWFPEDQRVLTPNLVATLPPSTYGAGGQLFCRTVWSAHSGPTRMATAEARCAAPEELLGCSSFSRSGKRRGERIEARGGRRICLAHNAFGGEGVYAVARCCLLPRANCRVHTAPPAGAGVQTQARCPQHGQVLTGCSSHWEVEDPGTPRRPVLRPRGQPDQCVGHKEASIHASCCHAPGLECKVREHGIPGPAEKVTVACEGGWTLTSCGTLPGAWPALGAYAVDNTCVVRGRDIGAGGRTGEEATVAIAICCRSRPSGEQASQEAQ"
	# Amino_Acid_List = [human, chimpanzee, macaca_nemestrina]
	# taxaList = ['human', 'chimpanzee', 'macaca_nemestrina']
	# mat = MakeDistanceMatrixFromData(Amino_Acid_List, "AA")

	# DNA Lipase, member H
	# human = "ATGCTCAGGTTTTATTTATTTATCAGTCTGCTTTGTCTATCCCGGAGCGACGCCGAAGAGACTTGCCCGAGTTTTACGCGCTTAAGTTTCCACAGTGCAGTGGTGGGAACTGGTCTGAACGTTCGCTTGATGCTCTACACGCGCAAAAATCTAACCTGCGCACAAACTATCAATTCTTCCGCTTTTGGGAACCTGAACGTTACGAAGAAAACAACGTTTATAGTACATGGATTTCGCCCAACAGGTTCTCCACCAGTTTGGATGGATGACCTTGTCAAGGGCTTACTCAGCGTCGAAGACATGAATGTAGTGGTTGTCGACTGGAACCGCGGCGCCACCACCCTGATTTACACACATGCGTCCAGTAAAACGCGTAAAGTAGCGATGGTTCTAAAAGAATTTATAGATCAGATGCTGGCTGAAGGCGCAAGTCTAGACGACATTTATATGATTGGCGTTTCCTTGGGTGCACACATTTCTGGGTTCGTTGGTGAAATGTATGACGGTTGGCTAGGCCGCATCACTGGTTTAGACCCTGCTGGCCCTCTCTTTAATGGGAAGCCGCACCAGGATCGGCTCGATCCAAGTGATGCGCAATTCGTGGATGTGATTCACAGCGATACAGACGCCCTAGGTTACAAAGAGCCTTTAGGCAATATAGATTTTTATCCGAATGGTGGACTGGACCAGCCCGGATGTCCCAAGACAATTCTGGGTGGTTTTCAGTATTTTAAATGTGATCATCAACGTTCTGTATATCTTTACCTATCATCTCTCCGCGAGTCTTGCACGATTACAGCATACCCATGCGACTCTTACCAAGATTACCGCAATGGGAAGTGTGTGTCATGCGGCACGTCACAGAAGGAATCTTGCCCTTTACTGGGCTACTACGCGGATAATTGGAAGGACCACCTACGGGGTAAGGATCCACCCATGACTAAGGCGTTCTTTGACACGGCCGAGGAGTCACCGTTCTGCATGTATCACTATTTCGTCGACATCATTACCTGGAATAAAAATGTGCGGAGGGGGGACATAACGATAAAACTGCGCGATAAGGCAGGTAACACCACAGAATCTAAGATAAACCATGAACCAACGACTTTCCAAAAGTACCACCAGGTATCACTTCTCGCCAGGTTCAACCAAGATTTGGATAAAGTAGCGGCCATAAGTTTAATGTTTTCAACGGGGTCGCTAATTGGCCCCCGTTACAAACTTCGAATCCTACGCATGAAACTCCGGTCGCTAGCGCATCCGGAAAGGCCACAATTATGCCGGTACGACTTGGTACTGATGGAAAACGTAGAAACCGTGTTCCAACCCATACTCTGCCCAGAACTCCAATTG"
	# mouse = "ATGCTTCGTTTATGTTTCTTCATTTCTTTTATGTGTCTTGTAAAGAGCGACACGGACGAGACGTGTCCTTCATTTACCCGACTCAGCTTTCATTCTGCAGTCGTTGGGACCGGGTTATCAGTGAGACTTATGCTTTACACCCAAAGAGATCAGACATGTGCGCAAATAATTAACTCAACTGCACTCGGTTCCTTAAATGTTACCAAAAAAACAACTTTCATTATCCATGGTTTCCGCCCGACAGGGTCGCCGCCAGTATGGATAGAAGAGCTGGTGCAGTCTTTAATCTCGGTTCAGGAGATGAACGTGGTTGTGGTTGATTGGAACCGGGGAGCCACCACCGTTATTTATCCACATGCCTCGAGCAAAACTCGTCAAGTAGCATCAATATTGAAGGAATTTATAGATCAAATGCTGGTGAAGGGAGCTTCTCTGGATAATATATATATGATTGGGGTTTCACTGGGTGCGCACATAGCTGGCTTTGTGGGAGAAAGCTACGAAGGGAAGTTAGGACGCGTCACAGGTCTAGACCCTGCGGGTCCCCTATTTAACGGACGACCACCCGAAGAGAGATTGGACCCCTCCGACGCTCTCTTCGTGGACGTCATTCACAGCGATACAGACGCCCTTGGGTACAAAGAAGCACTAGGACATATTGACTTTTACCCGAACGGTGGTCTTGATCAGCCTGGTTGTCCCAAAACTATCTTCGGGGGCATAAAATATTTCAAATGTGATCATCAGATGTCAGTATACTTATATCTTGCCTCGCTGCAGAATAATTGCTCGATCACGGCGTACCCCTGCGATTCATACCGAGATTATAGAAACGGAAAGTGTGTGTCCTGTGGTGCAGGACAAATCGTACCGTGCCCAAGAGTCGGTTACTATGCGGATTCGTGGAAGGAGTACCTGTGGGATCGGGATCCGCCGATGACTAAAGCCTTCTTCGACACTGCTGAGACGAAGCCCTATTGCATGTATCACTATTTCGTGGACATCGTCTCGTGGAACAAAAGTGTACGCCGTGGATTTATCACCATAAAACTAAGGGGTGAGGACGGCAACATTACCGAGAGCAAGATAGACCATGAACCTTCTGCATTCGAAAAATATCACCAAGTGAGCCTGCTTGCACGCTTTAACCGCGACTTAGACAAAGTCGCTGAAATCAGCTTAATGTTTTCAACTGGCAGCGTGGTGGGCCCCAAATACAAATTGCGGGTACTGCAGATGAAATTGCGATCGCTGGCACACCCTGACCGCCCTCATCTTTGTCGATACGACCTTGTACTAATGGAGAATGTCGAAACCTCTTTCCAACCGATCCTATGTAGTCAACAACAAATG"
	# atlantic_salmon = "ATGATGATCTTTTGGTGGTTTCTCGCGCTGCTTCTCGGTAGCGTCGAGATATATAGAGCACATGAATGTGATGTCTTCACTTACCTTGACTTTTATCACGCGCTTATCGGTACCTCCCTGTATGTAAAGCTTCTTCTGTATACCAGGGCGAACTTGACTTGCGGCCAGGAGCTCTCCCATCATAACCTTTCCGCACAGCCGCAGTTTAACCTCACAAAACCTACGACGTTTGTTGTCCATGGGTATCGACCTACTGGGGCGCCGCCCAATTGGCTCAACAATATAATCGAGCAGTTATTAGCACGGGGAGATATGAATGTTCTGGTAGTCGATTGGAACCGAGGAGCGGCCAATATCAACTATCTTAAAGTTGTAACTTACTCGAGACACACAGCCGATAATCTCACTGCATTCATACAAAATATGCAGGAGAACGGTGCCAGCCTATCTTCGATTCACATGATCGGTTTAAGCCTAGGGGCCCATATTACAGGCTTCGTAGGGGCCAAGTTCAATGGAAAAATTGGCCGGATCACTGCTGTAGACCCCGCTGGACCACAATTCAACGGTAAACCTCCCGAGGACCGGCTCGATCCCACGGACGCTCAATTCGTAGACGTTGTTCATACTGATATGGACGCATTTGGATTTCGGAAACCGCTCGGACACATAGATTTCTATGCGAACGGGGGGGCGGATCAACCAGGATGTCCACTCACCATACTGTCCGGATCATCATATTTCAAGTGCGACCATCAACGATCCGTGTTACTATACCTGGGAAGTCTAAACCGTACTTGTAATATAAGGGCCTTCCCATGCACCTCTTATACAGACTTCTTGGACGGCCTCTGCATGGATTGTGATCAATTCAAACCGGCAGGATGTCCGGTGTTTGGATACGACATTATCGAGTGGAAGGAGAGCCTCGTCCCTTTAAGACAGACTAAAGCCTTTTTCACAACGAACAAGCAAACACCATATTGTCAGACGAATTACTGGGTGGATATTGTAACGTGGAATTCCGACACTAGGTGGGGTTATATAACTATTAAATTGCACAACGGATCCGAAGTGACGGAAGCGACTATTAACCACAAGGCTTCATCATTTAACAAGTACAGTGAGACCAGGCTGCTGGCTCAGTTTGAAAAGGATCTGCAGAAAGTGCACAAGATCAGCATTAAATTCTCGCGAGTCAATGTATTCAAGCCAAAGTATAAGCTTCGTGTGCTCCGTATTAGGCTAACTCACCTAGAGAGAAAAGATCGACCCCTCTGCCGTTATGATGTCTTGCTAGAAGACAATAGGGAAGTTACCTTTAGGAGCATCCCGTGCGAAGAGTCGAACTTT"
	# rat = "ATGTTGCGTCTTTGTTTCCTTCTTTCCTTCATGTGTCTCGTTAAGAGTGACACTGACGAAACTTGTCCCAGTTTTACCCGACTCTCGTTCCACAGCGCGGTTGTCGGCACGGGGCTATCCGTCCGCCTCATGCTTTATACACAGCGAGATCAAACATGCGCCCAAGTTATAAACAGTACCGCCCTAGGCTCCCTAAACGTAACAAAAAAAACGACGTTCATCATACATGGATTCAGGCCGACTGGTTCACCACCCGTATGGATGGAAGAGCTTGTACAAAGTCTAATTTCCGTCCAGGAGATGAACGTCGTTGTGGTCGATTGGAACCGTGGCGCGACTACGGTAATCTACCCACACGCGTCATCTAAAACGAGGAAAGTTGCTCTCATACTAAAAGAATTTATTGATCAGATGCTGGCCAAAGGCGCCTCCCTTGACAACATTTATATGATAGGGGTCTCACTAGGCGCACACATCGCTGGATTTGTTGGGGAGATGTATTCTGGCAAACTCGGAAGAATAACGGGTCTAGACCCTGCTGGTCCTTTATTCAACGGGAGACCTCCAGAAGATCGCCTTGACCCTAGCGACGCACAATTTGTGGACGTGATACACAGCGACACCGACGCTCTCGGATATAGAGAAGCGCTTGGGCACATTGATTTTTATCCAAACGGCGGACTCGATCAGCCGGGGTGCCCGAAGACTATATTCGGCGGCATAAAATACTTTAAGTGTGACCATCAAATGTCCGTCTTTCTCTACTTAGCGTCGCTACAAAATAACTGCAGCATCACAGCTTATCCCTGCGACTCCTACCGAGATTATCGGAATGGCAAGTGTGTATCTTGTGGTGCTGGCCATATAGTTTCCTGTCCGTCCTTAGGTTACTATGCCGATAACTGGAGAGAATATTTATGGGATCGAGACCCGCCAATGACGAAAGCATTCTTCGACACAGCGGAAACAAAGCCCTACTGCATTTATCATTACTTCGTCGATATTATATCGTGGAACAAGTCAGTAAGAAGGGGATTCATCACCATCAAGTTACGAGGAGAGGATGGTAACATAACCGAGTCCAAAATCGACCATGAGCCCAGCGCTTTTCAGAAATACCACCAAGTCTCGCTGCTGGCTCGATTTAACAGGGACCTCGACAAAGTCGCCGAAATATCACTCTTGTTCTCCACAAAGTCCGTGGTAGGACCAAAATACAAACTGAGAGTTTTACGTATGAAGTTAAGGTCTTTAGCCCACCCCGACCGCCCACATCTCTGCCGATATGATCTCGTTCTGATGGAGAATGTTGAGACCTTCTTTCAACCGATTCTGTGTTCCAAACAACAGATG"
	# american_pika = "ATGCTTCGGCTATATTTATTTATAAGCTTACTATGCCTTGTGAGATCAGATACCGACGAGCCGTGCCCTTCTTTTACAAGATTGTCCTTTCACAGTGCCGTCGTCGGGACCGAGCTGAATGTACGGTTGTTACTCTACACAAGGGAAAATTCATCATGCGCCCAATTGATTAATTCGACTACCTTTGGGAACCTAAATATAACTAAAAAGACAACATTTATAGTGCACGGGTTTAGATTGACAGGCAGTCCACCGGTTTGGTGGGAAGACCTGGTAATGGCGCTCCTCAATGCCGAGGATATGAATGTTGTTGTCGTGGATTGGAATAGGGGCGCTACCACTGTGTTATATAACCAGGCAGCCAGTAATACCAAGAAGGTGGCTTTAATCCTTAAAGAATTTATTGATCAAATGCTTGCGAAAGGGGCGAGTTTAGACGACATTTACATGATAGGTGTCTCATTGGGGGCCCATATTTCAGGGTTTGTAGGGGAGATGTATGATGGCCAGTTAGGGCGGATTACCGGACTAGATCCGGCCGGACCGCTTTTTAATGGGAAACCACCGCAAGATAGACTTGACCCATCAGATGCGCAGTTCGTAGACGTAATTCACTCTGACACAGATGCGTTAGGGTTCAAGGACCCCCTTGGGAACATCGACTTTTATCCCAACGGGGGGTCCGACCAACCTGGATGTCCACAGACTATCTTCGGGGGGATGCAATACTTCAAGTGCGACCATCAGATGTCGGTATTCCTATATCTCAGTAGCCTGCGGAAAAACTGTACAATCACGGCGTATCCATGCGACTCCTACAGAGACTACCGAAACGGAAAATGTATTAACTGTGGGACGAGCCAGGGGAAGCCTTGTCCATTGCTGGGTTATTACGCCGACCGGTGGAAGGATTATCTCAATGAGCAAGACCCACCAATGATCAAGGCTTTCCTAGACACCGCAGACAAGGAACCTTATTGTATTTATCACTACTTCGTTGACATTATTACCTGGAACAAAAATATCCGTCGCGGTAGCATTACAATCAAGCTGCGTGACGAGGCCGGTAATATAACCGAATCGAAAATTAACCACGAACCTGCCACATTCCAGAAGTATCACCAAGTATCGTTGTTAGCTCGCTTTAATCAAGACCTCGATAAGGTCGCCGAGATATCGTTAGTGTTCTCAACGGGGTCCGCGATAGGTCCCAAATATAAGTTACGAATTCTTCGGATGAAGCTCAGGTCCCTCGCACACCCTGAGCGGCCACAGTTGTGTCGTTATGATCTTGTTCTAATGGAAAATGTAGAAACCTTCTTTCAGCCCATCCTTTGTCAACAGCAGCAAATG"
	# DNA_List = [human, mouse, atlantic_salmon, rat, american_pika]
	# taxaList = ['human', 'mouse', 'atlantic_salmon', 'rat', 'american_pika']
	# mat = MakeDistanceMatrixFromData(DNA_List, "DNA")

	# # AA lipase, member H ATLANTIC SALMON WAS NOT INCLUDED BECAUSE TOO MANY ERROR
	# human = "MLRFYLFISLLCLSRSDAEETCPSFTRLSFHSAVVGTGLNVRLMLYTRKNLTCAQTINSSAFGNLNVTKKTTFIVHGFRPTGSPPVWMDDLVKGLLSVEDMNVVVVDWNRGATTLIYTHASSKTRKVAMVLKEFIDQMLAEGASLDDIYMIGVSLGAHISGFVGEMYDGWLGRITGLDPAGPLFNGKPHQDRLDPSDAQFVDVIHSDTDALGYKEPLGNIDFYPNGGLDQPGCPKTILGGFQYFKCDHQRSVYLYLSSLRESCTITAYPCDSYQDYRNGKCVSCGTSQKESCPLLGYYADNWKDHLRGKDPPMTKAFFDTAEESPFCMYHYFVDIITWNKNVRRGDITIKLRDKAGNTTESKINHEPTTFQKYHQVSLLARFNQDLDKVAAISLMFSTGSLIGPRYKLRILRMKLRSLAHPERPQLCRYDLVLMENVETVFQPILCPELQL"
	# mouse = "MLRLCFFISFMCLVKSDTDETCPSFTRLSFHSAVVGTGLSVRLMLYTQRDQTCAQIINSTALGSLNVTKKTTFIIHGFRPTGSPPVWIEELVQSLISVQEMNVVVVDWNRGATTVIYPHASSKTRQVASILKEFIDQMLVKGASLDNIYMIGVSLGAHIAGFVGESYEGKLGRVTGLDPAGPLFNGRPPEERLDPSDALFVDVIHSDTDALGYKEALGHIDFYPNGGLDQPGCPKTIFGGIKYFKCDHQMSVYLYLASLQNNCSITAYPCDSYRDYRNGKCVSCGAGQIVPCPRVGYYADSWKEYLWDRDPPMTKAFFDTAETKPYCMYHYFVDIVSWNKSVRRGFITIKLRGEDGNITESKIDHEPSAFEKYHQVSLLARFNRDLDKVAEISLMFSTGSVVGPKYKLRVLQMKLRSLAHPDRPHLCRYDLVLMENVETSFQPILCSQQQM"
	# # atlantic_salmon = "MMIFWWFLALLLGSVEIYRAHECDVFTYLDFYHALIGTSLYVKLLLYTRANLTCGQELSHHNLSAQPQFNLTKPTTFVVHGYRPTGAPPNWLNNIIEQLLARGDMNVLVVDWNRGAANINYLKVVTYSRHTADNLTAFIQNMQENGASLSSIHMIGLSLGAHITGFVGAKFNGKIGRITAVDPAGPQFNGKPPEDRLDPTDAQFVDVVHTDMDAFGFRKPLGHIDFYANGGADQPGCPLTILSGSSYFKCDHQRSVLLYLGSLNRTCNIRAFPCTSYTDFLDGLCMDCDQFKPAGCPVFGYDIIEWKESLVPLRQTKAFFTTNKQTPYCQTNYWVDIVTWNSDTRWGYITIKLHNGSEVTEATINHKASSFNKYSETRLLAQFEKDLQKVHKISIKFSRVNVFKPKYKLRVLRIRLTHLERKDRPLCRYDVLLEDNREVTFRSIPCEESNF"
	# rat = "MLRLCFLLSFMCLVKSDTDETCPSFTRLSFHSAVVGTGLSVRLMLYTQRDQTCAQVINSTALGSLNVTKKTTFIIHGFRPTGSPPVWMEELVQSLISVQEMNVVVVDWNRGATTVIYPHASSKTRKVALILKEFIDQMLAKGASLDNIYMIGVSLGAHIAGFVGEMYSGKLGRITGLDPAGPLFNGRPPEDRLDPSDAQFVDVIHSDTDALGYREALGHIDFYPNGGLDQPGCPKTIFGGIKYFKCDHQMSVFLYLASLQNNCSITAYPCDSYRDYRNGKCVSCGAGHIVSCPSLGYYADNWREYLWDRDPPMTKAFFDTAETKPYCIYHYFVDIISWNKSVRRGFITIKLRGEDGNITESKIDHEPSAFQKYHQVSLLARFNRDLDKVAEISLLFSTKSVVGPKYKLRVLRMKLRSLAHPDRPHLCRYDLVLMENVETFFQPILCSKQQM"
	# american_pika = "MLRLYLFISLLCLVRSDTDEPCPSFTRLSFHSAVVGTELNVRLLLYTRENSSCAQLINSTTFGNLNITKKTTFIVHGFRLTGSPPVWWEDLVMALLNAEDMNVVVVDWNRGATTVLYNQAASNTKKVALILKEFIDQMLAKGASLDDIYMIGVSLGAHISGFVGEMYDGQLGRITGLDPAGPLFNGKPPQDRLDPSDAQFVDVIHSDTDALGFKDPLGNIDFYPNGGSDQPGCPQTIFGGMQYFKCDHQMSVFLYLSSLRKNCTITAYPCDSYRDYRNGKCINCGTSQGKPCPLLGYYADRWKDYLNEQDPPMIKAFLDTADKEPYCIYHYFVDIITWNKNIRRGSITIKLRDEAGNITESKINHEPATFQKYHQVSLLARFNQDLDKVAEISLVFSTGSAIGPKYKLRILRMKLRSLAHPERPQLCRYDLVLMENVETFFQPILCQQQQM"
	# Amino_Acid_List = [human, mouse, rat, american_pika]
	# taxaList = ['human', 'mouse', 'rat', 'american_pika']
	# mat = MakeDistanceMatrixFromData(Amino_Acid_List, "AA")

	while mat.shape[0] > 3:
		matrix1 = QMatrix(mat)
		matrix2 = makeNewMatrix(mat, matrix1, taxaList)
		mat = matrix2

	calcLastMatrix(mat, taxaList)

	writeGV(matrixList)
	print ".gv file written"

main()
